package net.heartsome.cat.te.core.utils;import java.io.File;import java.io.FileOutputStream;import java.util.ArrayList;import java.util.List;import net.heartsome.cat.common.ui.utils.OpenMessageUtils;import net.heartsome.cat.common.util.TextUtil;import net.heartsome.cat.te.core.bean.Property;import net.heartsome.cat.te.core.bean.TmxEditorFilterBean;import net.heartsome.cat.te.core.resource.Messages;import net.heartsome.xml.vtdimpl.VTDUtils;import org.eclipse.core.resources.ResourcesPlugin;import org.eclipse.core.runtime.IStatus;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import com.ximpleware.AutoPilot;import com.ximpleware.VTDGen;import com.ximpleware.VTDNav;import com.ximpleware.XMLModifier;/** * tmx editor 过滤器管理工具，主要处理过滤器的增删查改等操作 * @author robert	2013-06-17 */public class TmxCustomFilterUtil {	/** 自定义过滤器文件的保存路径 */	public final static String FILTERFILEPATH = ResourcesPlugin.getWorkspace().getRoot().getLocation().append(".metadata/.preference/.filter.xml").toOSString();	/** 标识 */	private boolean isFilterOpened = false;	private VTDNav vn;	private VTDUtils vu;	private XMLModifier xm;		public static Logger LOGGER = LoggerFactory.getLogger(TmxCustomFilterUtil.class.getName());		public TmxCustomFilterUtil(){		openFilter();	}		/**	 * 返回　过滤器存储文件是否可用	 * @return	boolean	 */	public boolean isFilterOpened() {		return isFilterOpened;	}//	/**//	 * 添加过滤器//	 * @param bean//	 *///	public void addFilter(TmxEditorFilterBean bean) throws Exception{//		try {//			AutoPilot ap = new AutoPilot(vn);//			ap.selectXPath("/filters");//			while(ap.evalXPath() != -1){//				String filter = createFilter(bean);//				xm.insertBeforeTail(filter.getBytes("UTF-8"));//			}//		} catch (Exception e) {//			LOGGER.error(Messages.getString("core.TmxCutomFilterUtil.logger.msg1"), e);//			throw new Exception(Messages.getString("core.TmxCutomFilterUtil.exception.msg1"), e);//		}//	}	//	/**//	 * 保存并且重新解析//	 *///	public void saveAndReparse() throws Exception{//		try {//			xm.output(FILTERFILEPATH);//			openFilter();//		} catch (Exception e) {//			LOGGER.error(Messages.getString("core.TmxCutomFilterUtil.logger.msg2"), e);//			throw new Exception(Messages.getString("core.TmxCutomFilterUtil.exception.msg2"), e);//		}//	}		public void saveFilters(List<TmxEditorFilterBean> filterList) throws Exception{		try {			AutoPilot ap = new AutoPilot(vn);			ap.selectXPath("/filters");			if(ap.evalXPath() != -1){				xm.remove();				StringBuffer filterSB = new StringBuffer();				filterSB.append("<filters>\n");				for(TmxEditorFilterBean bean : filterList){					filterSB.append(createFilter(bean));				}				filterSB.append("</filters>");				xm.insertAfterElement(filterSB.toString().getBytes("UTF-8"));			}			save();		} catch (Exception e) {			LOGGER.error(Messages.getString("core.TmxCutomFilterUtil.logger.msg1"), e);			throw new Exception(Messages.getString("core.TmxCutomFilterUtil.exception.msg1"), e);		}	}		/**	 * 保存但不解析	 */	private void save() throws Exception{		try {			xm.output(FILTERFILEPATH);		} catch (Exception e) {			LOGGER.error(Messages.getString("core.TmxCutomFilterUtil.logger.msg3"), e);			throw new Exception(Messages.getString("core.TmxCutomFilterUtil.exception.msg3"), e);		}	}	/**	 * 获取所有的过滤器	 * @return ;	 */	public List<TmxEditorFilterBean> getAllCustomFilters(){		return getCustomFilters("/filters/filter");	}		/**	 * 获取 可用的 自定义过滤器	 * @return ;	 */	public List<TmxEditorFilterBean> getUseableCustomFilters(){		return getCustomFilters("/filters/filter[@useable='true']");	}			/**	 * 获取自定义过滤器	 * @param xpath	 * @return	 */	private List<TmxEditorFilterBean> getCustomFilters(String xpath){		List<TmxEditorFilterBean> filterList = new ArrayList<TmxEditorFilterBean>();		try {			AutoPilot ap = new AutoPilot(vn);			ap.selectXPath(xpath);						int index = -1;			while(ap.evalXPath() != -1){				List<Property> srcFilterList = new ArrayList<Property>();				List<Property> tgtFilterList = new ArrayList<Property>();				List<Property> noteFilterList = new ArrayList<Property>();				List<Property> fixedPropFilterList = new ArrayList<Property>();				List<Property> customPropFilterList = new ArrayList<Property>();				List<Property> tempList = new ArrayList<Property>();								TmxEditorFilterBean bean = new TmxEditorFilterBean();				String id = "";				if ((index = vn.getAttrVal("id")) != -1) {					id = vn.toString(index);					id = id == null ? "" : id.trim();				}				if (id.isEmpty()) {					continue;				}				String name = "";				if ((index = vn.getAttrVal("name")) != -1) {					name = vn.toString(index);					name = name == null ? "" : name.trim();				}				if (name.isEmpty()) {					continue;				}								boolean isUseable = false;				if ((index = vn.getAttrVal("useable")) != -1) {					isUseable = "true".equals(vn.toString(index));				}				boolean isFitAll = false;				if ((index = vn.getAttrVal("fitAll")) != -1) {					isFitAll = "true".equals(vn.toString(index));				}								// 开始遍历所有的处理对象。				AutoPilot childAP = new AutoPilot(vn);				AutoPilot itemAP = new AutoPilot(vn);				childAP.selectXPath("./node()");				vn.push();				String nodeName = "";				String key = "";				String value = "";				while(childAP.evalXPath() != -1){					nodeName = vn.toString(vn.getCurrentIndex());					vn.push();					itemAP.selectXPath("./item");					while(itemAP.evalXPath() != -1){						index = vn.getAttrVal("typeOrPropName");						if ((index = vn.getAttrVal("typeOrPropName")) != -1) {							key = vn.toString(index);							key = key == null ? "" : key.trim();						}						value = TextUtil.resetSpecialString(vu.getElementContent());						value = value == null ? "" : value.trim();						if (!key.isEmpty() && !value.isEmpty()) {							tempList.add(new Property(key, value));						}					}					vn.pop();										if ("source".equals(nodeName)) {						srcFilterList.addAll(tempList);					}else if ("target".equals(nodeName)) {						tgtFilterList.addAll(tempList);					}else if ("note".equals(nodeName)) {						noteFilterList.addAll(tempList);					}else if ("fixedProp".equals(nodeName)) {						fixedPropFilterList.addAll(tempList);					}else if ("customProp".equals(nodeName)) {						customPropFilterList.addAll(tempList);					}					tempList.clear();				}				vn.pop();								bean.setId(id);				bean.setName(name);				bean.setCustom(true);				bean.setUseable(isUseable);				bean.setFitAll(isFitAll);				bean.setSrcFilter(srcFilterList);				bean.setTgtFilter(tgtFilterList);				bean.setNoteFilter(noteFilterList);				bean.setCustomPropFilter(customPropFilterList);				bean.setFixedPropFilter(fixedPropFilterList);								filterList.add(bean);			}		} catch (Exception e) {			OpenMessageUtils.openMessage(IStatus.ERROR, Messages.getString("core.tmxCutomFilterUtil.error.msg"));			LOGGER.error(Messages.getString("core.tmxCutomFilterUtil.error.Logger.msg"), e);		}				return filterList;	}				/**	 * 根据传入的过滤器进行修改，修改后必须手动保存。	 * @param bean	 * @return	 * @throws Exception	 */	public TmxEditorFilterBean updateFilter(TmxEditorFilterBean bean) throws Exception{		try {			if (bean.getId() == null || bean.getId().trim().isEmpty()) {				LOGGER.error(Messages.getString("core.tmxCutomFilterUtil.modifyFail.logger"));				throw new Exception(Messages.getString("core.tmxCutomFilterUtil.modifyFail.msg"));			}			AutoPilot ap = new AutoPilot(vn);			ap.selectXPath("/filters/filter[@id='" + bean.getId() + "']");			if (ap.evalXPath() != -1) {				xm.remove();				xm.insertAfterElement(createFilter(bean));			}else {				LOGGER.error(Messages.getString("core.tmxCutomFilterUtil.modifyFail.logger1"));				throw new Exception(Messages.getString("core.tmxCutomFilterUtil.modifyFail.msg1"));			}		} catch (Exception e) {			LOGGER.error(Messages.getString("core.tmxCutomFilterUtil.modifyFail.logger"), e);			throw new Exception(Messages.getString("core.tmxCutomFilterUtil.modifyFail.msg"), e);		}		return null;	}		/**	 * 打开过滤器存储文件	 */	private void openFilter(){		try {			if (!new File(FILTERFILEPATH).exists()) {				creatFilterFile();			}						VTDGen vg = new VTDGen();			if (vg.parseFile(FILTERFILEPATH, true)) {				vn = vg.getNav();				vu = new VTDUtils(vn);				xm = new XMLModifier(vn);				isFilterOpened = true;			}else {				boolean isCreate = OpenMessageUtils.openConfirmMessage(Messages.getString("core.tmxCutomFilterUtil.error.filterFileWrong"));				if (isCreate) {					creatFilterFile();					openFilter();				}else {					isFilterOpened = false;				}			}		} catch (Exception e) {			LOGGER.error("", e);		}	}			/**	 * 创建　自定义过滤器存储文件	 */	private void creatFilterFile(){		File parentFile = new File(FILTERFILEPATH).getParentFile();		if (!parentFile.exists()) {			parentFile.mkdirs();		}		FileOutputStream output = null;		try {			output = new FileOutputStream(FILTERFILEPATH);			output.write("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n".getBytes("UTF-8"));			output.write("<filters>\n</filters>".getBytes("UTF-8"));					} catch (Exception e) {			LOGGER.error("", e);		}finally{			try {				if (output != null) {					output.close();				}			} catch (Exception e2) {				LOGGER.error("", e2);			}		}	}		/**	 * 要据传进来的　bean 生成一个 filter 的字符串	 * @param bean	 * @return	 */	private String createFilter(TmxEditorFilterBean bean){		// UNDO 这里还要处理相同链值对的情况				StringBuffer sb = new StringBuffer();		sb.append("<filter id=\"" + bean.getId() + "\" name=\"" + bean.getName() + "\"" +				" useable=\"" + bean.isUseable() + "\" fitAll=\"" + bean.isFitAll() + "\">\n");				// 处理对象为源文的情况		if (bean.getSrcFilter() != null && bean.getSrcFilter().size() > 0) {			sb.append("\t<source>\n");			for(Property property : bean.getSrcFilter()){				sb.append("\t\t<item typeOrPropName=\"" + TextUtil.cleanSpecialString(property.getKey()) + "\">");				sb.append(TextUtil.cleanSpecialString(property.getValue()));				sb.append("</item>\n");			}			sb.append("\t</source>\n");		}		// 处理对象为译文的情况		if (bean.getTgtFilter() != null && bean.getTgtFilter().size() > 0) {			sb.append("\t<target>\n");			for(Property property : bean.getTgtFilter()){				sb.append("\t\t<item typeOrPropName=\"" + TextUtil.cleanSpecialString(property.getKey()) + "\">");				sb.append(TextUtil.cleanSpecialString(property.getValue()));				sb.append("</item>\n");			}			sb.append("\t</target>\n");		}		// 处理对象为批注的情况		if (bean.getNoteFilter() != null && bean.getNoteFilter().size() > 0) {			sb.append("\t<note>\n");			for(Property property : bean.getNoteFilter()){				sb.append("\t\t<item typeOrPropName=\"" + TextUtil.cleanSpecialString(property.getKey()) + "\">");				sb.append(TextUtil.cleanSpecialString(property.getValue()));				sb.append("</item>\n");			}			sb.append("\t</note>\n");					}		// 处理对象为固定属性的情况		if (bean.getFixedPropFilter() != null && bean.getFixedPropFilter().size() > 0) {			sb.append("\t<fixedProp>\n");			for(Property property : bean.getFixedPropFilter()){				sb.append("\t\t<item typeOrPropName=\"" + TextUtil.cleanSpecialString(property.getKey()) + "\">");				sb.append(TextUtil.cleanSpecialString(property.getValue()));				sb.append("</item>\n");			}			sb.append("\t</fixedProp>\n");		}			// 处理对象为自定义属性的情况		if (bean.getCustomPropFilter() != null && bean.getCustomPropFilter().size() > 0) {			sb.append("\t<customProp>\n");			for(Property property : bean.getCustomPropFilter()){				sb.append("\t\t<item typeOrPropName=\"" + TextUtil.cleanSpecialString(property.getKey()) + "\">");				sb.append(TextUtil.cleanSpecialString(property.getValue()));				sb.append("</item>\n");			}			sb.append("\t</customProp>\n");		}				sb.append("</filter>\n");		return sb.toString();	}	}